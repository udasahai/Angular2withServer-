"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var authconfig_1 = require("./authconfig");
var jwthelper_1 = require("./jwthelper");
var AuthHttp = (function () {
    function AuthHttp(_options, _http) {
        this._options = _options;
        this._http = _http;
        this._config = _options.getConfig();
        this._helper = new jwthelper_1.JwtHelper();
    }
    AuthHttp.prototype._request = function (url, options) {
        var req = url;
        if (!req.headers) {
            req.headers = new http_1.Headers();
        }
        req.headers.set(this._config.headerName, this._config.headerPrefix + this._config.tokenGetter());
        return this._http.request(req);
    };
    AuthHttp.prototype._requestHelper = function (requestArgs, additionalOptions) {
        if (!this._helper.tokenNotExpired(null, this._config.tokenGetter())) {
            if (!this._config.noJwtError) {
                throw 'Invalid JWT';
            }
        }
        var options = new http_1.RequestOptions(requestArgs);
        if (additionalOptions) {
            options = options.merge(additionalOptions);
        }
        return this._request(new http_1.Request(options));
    };
    AuthHttp.prototype.get = function (url, options) {
        return this._requestHelper({ url: url, method: http_1.RequestMethod.Get }, options);
    };
    AuthHttp.prototype.post = function (url, body, options) {
        return this._requestHelper({ url: url, body: body, method: http_1.RequestMethod.Post }, options);
    };
    AuthHttp.prototype.put = function (url, body, options) {
        return this._requestHelper({ url: url, body: body, method: http_1.RequestMethod.Put }, options);
    };
    AuthHttp.prototype.delete = function (url, options) {
        return this._requestHelper({ url: url, method: http_1.RequestMethod.Delete }, options);
    };
    AuthHttp.prototype.patch = function (url, body, options) {
        return this._requestHelper({ url: url, body: body, method: http_1.RequestMethod.Patch }, options);
    };
    AuthHttp.prototype.head = function (url, options) {
        return this._requestHelper({ url: url, method: http_1.RequestMethod.Head }, options);
    };
    AuthHttp = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [authconfig_1.AuthConfig, http_1.Http])
    ], AuthHttp);
    return AuthHttp;
}());
exports.AuthHttp = AuthHttp;
//# sourceMappingURL=authhttp.js.map