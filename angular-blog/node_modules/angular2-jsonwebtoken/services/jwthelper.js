"use strict";
/**
 * Helper class to manage JWT.
 */
var JwtHelper = (function () {
    function JwtHelper() {
    }
    /**
     * Decodes a Base64-encoded string.
     * @param str The Base64-encoded string
     * @returns {string}
     */
    JwtHelper.prototype.urlBase64Decode = function (str) {
        var output = str.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0: {
                break;
            }
            case 2: {
                output += '==';
                break;
            }
            case 3: {
                output += '=';
                break;
            }
            default: {
                throw 'Illegal base64url string!';
            }
        }
        return decodeURIComponent(window.atob(output));
    };
    /**
     * Decodes the token and returns it as JSON object.
     * @param token The token to be decoded
     * @returns {Object} The token as JSON object
     */
    JwtHelper.prototype.decodeToken = function (token) {
        var parts = token.split('.');
        if (parts.length !== 3) {
            throw new Error('JWT must have 3 parts');
        }
        var decoded = this.urlBase64Decode(parts[1]);
        if (!decoded) {
            throw new Error('Cannot decode the token');
        }
        return JSON.parse(decoded);
    };
    /**
     * Returns the date when a token expires
     * @param token The token
     * @returns {Date} The expiration date of the token
     */
    JwtHelper.prototype.getTokenExpirationDate = function (token) {
        var decoded;
        decoded = this.decodeToken(token);
        if (typeof decoded.exp === "undefined") {
            return null;
        }
        var date = new Date(0); // The 0 here is the key, which sets the date to the epoch
        date.setUTCSeconds(decoded.exp);
        return date;
    };
    /**
     * Checks to see if the token is expired
     * @param token The token
     * @param offsetSeconds
     * @returns {boolean} True if the token is expired, false otherwise
     */
    JwtHelper.prototype.isTokenExpired = function (token, offsetSeconds) {
        var date = this.getTokenExpirationDate(token);
        offsetSeconds = offsetSeconds || 0;
        if (date === null) {
            return false;
        }
        // Token expired?
        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));
    };
    /**
     * Checks for presence of token and that token hasn't expired.
     * For use with the @CanActivate router decorator and NgIf
     */
    JwtHelper.prototype.tokenNotExpired = function (tokenName, jwt) {
        var authToken = tokenName || 'auth_token';
        var token;
        if (jwt) {
            token = jwt;
        }
        else {
            token = localStorage.getItem(authToken);
        }
        if (!token || this.isTokenExpired(token, null)) {
            return false;
        }
        else {
            return true;
        }
    };
    return JwtHelper;
}());
exports.JwtHelper = JwtHelper;
//# sourceMappingURL=jwthelper.js.map